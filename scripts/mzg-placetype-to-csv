#!/usr/bin/env python

import sys
import logging
import os.path
import csv
import pprint
import geojson

if __name__ == '__main__':

    import optparse
    opt_parser = optparse.OptionParser()

    opt_parser.add_option('-s', '--source', dest='source', action='store', default=None, help='Where to read files from')
    opt_parser.add_option('-p', '--place-type', dest='place', action='store', default=None, help='')
    opt_parser.add_option('-a', '--abspath', dest='abspath', action='store_true', default=False, help='Write absolute paths')
    opt_parser.add_option('-c', '--csv', dest='csv', action='store', default=None, help='Where to write concordances (default is STDOUT)')

    opt_parser.add_option('-v', '--verbose', dest='verbose', action='store_true', default=False, help='Be chatty (default is false)')
    options, args = opt_parser.parse_args()

    if options.verbose:	
        logging.basicConfig(level=logging.DEBUG)
    else:
        logging.basicConfig(level=logging.INFO)

    if not options.place:
        logging.error("Missing place type")
        sys.exit(1)

    # sanity check place type here

    source = os.path.abspath(options.source)
    fh = sys.stdout

    if options.csv:
        path = os.path.abspath(options.csv)
        fh = open(path, 'w')

    defaults = {
        'id': 0,
        'parent_id': 0,
        'name': '',
        'source': '',
        'path' : '',
        'lastmodified': 0,
        'iso': '',
        'bbox': '',
        'geomhash': '',
        'woe_id': 0,
        'geonames_id': 0,
        }

    fn = defaults.keys()
    fn.sort()

    writer = csv.DictWriter(fh, fieldnames=fn)
    writer.writeheader()

    for (path, dirs, files) in os.walk(source):

        for f in files:

            f = os.path.join(path, f)
            f = os.path.abspath(f)

            if not f.endswith(".geojson"):
                logging.debug("%s is not a geojson file, skipping")
                continue

            logging.debug("processing %s" % f)

            try:
                fh = open(f, 'r')
                data = geojson.load(fh)
            except Exception, e:
                logging.error("failed to process %s, because %s" % (f, e))
                continue

            props = data['properties']
            placetype = props.get('mz:placetype', None)

            if not placetype:
                logging.warning("%s is missing an mz:placetype property" % f)
                continue

            if placetype != options.place:
                logging.debug("%s is a %s, so skipping" % (f, placetype))
                continue

            out = defaults

            mzid = props.get('mz:id', 0)

            if mzid == 0:
                logging.warning("%s is missing an mz:id property, using filename" % f)
                fname = os.path.basename(f)
                mzid = fname.replace(".geojson", "")

            out['id'] = mzid

            out['parent_id'] = props.get('mz:parent_id', 0)

            name = props.get('mz:name', None)

            if not name:
                name = props.get('name', None)

            if not name:
                name = ""

            name = name.encode('utf8')
            out['name'] = name

            source = props.get("mz:source", None)
            
            if not source:
                source = props.get("mz:datasource", None)

            if not source:
                logging.warning("%s is missing a mz:source property" % f)
                source = ""

            out['source'] = source

            if not options.abspath:
                f = f.replace(options.source, "")
                f = f.lstrip("/")
            
            out['path'] = f

            bbox = data.get('bbox', None)

            if bbox:
                bbox = map(str, bbox)
                bbox = ",".join(bbox)
                out['bbox'] = bbox

            out['geonames_id'] = props.get('gn:id', 0)
            out['woe_id'] = props.get('woe:id', 0)
            out['iso'] = props.get('iso:country', '')
            out['lastmodified'] = props.get('mz:lastmodified', 0)
            out['geomhash'] = props.get('mz:geomhash', '')

            writer.writerow(out)
