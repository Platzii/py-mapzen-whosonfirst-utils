#!/usr/bin/env python

import sys
import logging
import os.path
import csv
import pprint
import geojson

if __name__ == '__main__':

    import optparse
    opt_parser = optparse.OptionParser()

    opt_parser.add_option('-s', '--source', dest='source', action='store', default=None, help='Where to read files from')
    opt_parser.add_option('-p', '--place-type', dest='place', action='store', default=None, help='')
    opt_parser.add_option('-a', '--abspath', dest='abspath', action='store_true', default=False, help='Write absolute paths')
    opt_parser.add_option('-c', '--csv', dest='csv', action='store', default=None, help='Where to write concordances (default is STDOUT)')

    opt_parser.add_option('-v', '--verbose', dest='verbose', action='store_true', default=False, help='Be chatty (default is false)')
    options, args = opt_parser.parse_args()

    if options.verbose:	
        logging.basicConfig(level=logging.DEBUG)
    else:
        logging.basicConfig(level=logging.INFO)

    if not options.place:
        logging.error("Missing place type")
        sys.exit(1)

    # sanity check place type here

    source = os.path.abspath(options.source)
    fh = sys.stdout

    if options.csv:
        path = os.path.abspath(options.csv)
        fh = open(path, 'w')

    fn = ('id','name','source','path')
    writer = csv.DictWriter(fh, fieldnames=fn)
    writer.writeheader()

    for (path, dirs, files) in os.walk(source):

        for f in files:

            f = os.path.join(path, f)
            f = os.path.abspath(f)
            
            fh = open(f, 'r')
            data = geojson.load(fh)
            
            props = data['properties']
            placetype = props.get('mz:placetype', None)

            if not placetype:
                logging.warning("%s is missing an mz:placetype property" % f)
                continue

            if placetype != options.place:
                logging.debug("%s is a %s, so skipping" % (f, placetype))
                continue

            mzid = props.get('mz:id', 0)

            if mzid == 0:
                logging.warning("%s is missing an mz:id property, using filename" % f)
                fname = os.path.basename(f)
                mzid = fname.replace(".geojson", "")

            name = props.get('mz:name', None)

            if not name:
                name = props.get('name', None)

            if not name:
                name = ""

            name = name.encode('utf8')

            source = props.get("mz:source", None)
            
            if not source:
                source = props.get("mz:datasource", None)

            if not source:
                logging.warning("%s is missing a mz:source property" % f)
                source = ""

            if not options.abspath:
                
                f = f.replace(options.source, "")
                f = f.lstrip("/")

            out = {
                'id': mzid,
                'name': name,
                'source': source,
                'path': f
                }

            writer.writerow(out)
