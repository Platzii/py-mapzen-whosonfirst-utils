#!/usr/bin/env python

import sys
import os.path
import logging
import geojson
import copy
import pprint

import mapzen.whosonfirst.utils
import mapzen.whosonfirst.export

if __name__ == '__main__':

    import optparse
    opt_parser = optparse.OptionParser()

    opt_parser.add_option('-s', '--source', dest='source', action='store', default=None, help='Where to read files from')
    opt_parser.add_option('-w', '--wofid', dest='wofid', action='store', default=None, help='The WOF ID that is about to be superseded')
    opt_parser.add_option('-v', '--verbose', dest='verbose', action='store_true', default=False, help='Be chatty (default is false)')
    options, args = opt_parser.parse_args()

    if options.verbose:	
        logging.basicConfig(level=logging.DEBUG)
    else:
        logging.basicConfig(level=logging.INFO)

    if not options.wofid:
        logging.error("Missing WOF ID")
        sys.exit()

    id = options.wofid

    source = os.path.abspath(options.source)
    path = mapzen.whosonfirst.utils.id2abspath(source, id)

    if not os.path.exists(path):
        logging.error("%s does not exist")
        sys.exit()

    # sudo put me in a function?

    old_record = None
    new_record = None

    try:
        fh = open(path, 'r')
        old_record = geojson.load(fh)
    except Exception, e:
        logging.error("failed to open %s, because %s" % (path, e))
        sys.exit()

    new_record = copy.deepcopy(old_record)
    
    old_props = old_record['properties']
    new_props = new_record['properties']

    old_id = old_props['wof:id']
    new_id = mapzen.whosonfirst.utils.generate_id()

    new_record['id'] = new_id
    new_props['wof:id'] = new_id

    if not old_id in new_props['wof:supersedes']:
        new_props['wof:supersedes'].append(old_id)

    if not new_id in old_props['wof:superseded_by']:
        old_props['wof:superseded_by'].append(new_id)

    logging.debug(pprint.pformat(old_props))
    logging.debug(pprint.pformat(new_props))

    old_record['properties'] = old_props
    new_record['properties'] = new_props

    # end of sudo put me in a function?

    exporter = mapzen.whosonfirst.export.flatfile(source)
    exporter.export_feature(old_record)
    exporter.export_feature(new_record)

    # to do - update children of old_record?

    new_path = mapzen.whosonfirst.utils.id2abspath(source, new_id)
    logging.info(new_path)

    sys.exit()
