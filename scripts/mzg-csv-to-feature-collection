#!/usr/bin/env python

import sys
import logging
import os.path
import csv
import pprint
import geojson

import requests
import StringIO
import boto.s3.connection
import boto.s3.key

if __name__ == '__main__':

    import optparse
    opt_parser = optparse.OptionParser()

    opt_parser.add_option('-s', '--source', dest='source', action='store', default='fs', help='Where to read files from (default is "fs")')
    opt_parser.add_option('-p', '--prefix', dest='prefix', action='store', default=None, help='Prefix for paths in CSV file (optional)')

    opt_parser.add_option('-c', '--csv', dest='csv', action='store', default=None, help='CSV file to read')
    opt_parser.add_option('-o', '--out', dest='out', action='store', default=None, help='Where to write feature collection (default is STDOUT)')

    opt_parser.add_option('-v', '--verbose', dest='verbose', action='store_true', default=False, help='Be chatty (default is false)')

    options, args = opt_parser.parse_args()

    if options.verbose:	
        logging.basicConfig(level=logging.DEBUG)
    else:
        logging.basicConfig(level=logging.INFO)

    if options.out:
        out = os.path.abspath(options.out)
        out = open(out, 'w')
    else:
        out = sys.stdout

    out.write("""{"type": "FeatureCollection", "features": [""")

    path = os.path.abspath(options.csv)
    fh = open(path, 'r')

    reader = csv.DictReader(fh)
    first = True

    # TO DO: max records...

    for row in reader:

        path = row['path']

        if options.prefix:
            path = os.path.join(options.prefix, path)

        logging.debug("fetching %s, with %s" % (path, options.source))

        fdata = None

        if options.source == 's3':
            
            try:
                rsp = requests.get(path)
            except Exception, e:
                logging.error("failed to retrieve %s, because %s" % (path, e))
                continue

            code = rsp.status_code

            if code != 200:
                logging.error("%s returned an unexpected status code: %s" (path, code))
                continue

            fdata = StringIO.StringIO()
            fdata.write(rsp.content)
            fdata.seek(0)

        else:

            if not os.path.exists(path):
                logging.error("%s does not exist, skipping" % path)
                continue

            fdata = open(path, 'r')

        if first == True:
            first = False
        else:
            out.write(",")

        out.write(fdata.read())

    out.write("""]}""")
    out.close()
