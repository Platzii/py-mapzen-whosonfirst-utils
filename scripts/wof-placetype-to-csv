#!/usr/bin/env python

import sys
import logging
import os.path
import csv
import pprint
import geojson
import time
import shutil

import mapzen.whosonfirst.utils
# import mapzen.whosonfirst.placetypes

if __name__ == '__main__':

    import optparse
    opt_parser = optparse.OptionParser()

    opt_parser.add_option('-s', '--source', dest='source', action='store', default=None, help='Directory to read files from')
    opt_parser.add_option('-p', '--placetype', dest='placetype', action='store', default=None, help='')
    opt_parser.add_option('-c', '--csv', dest='csv', action='store', default=None, help='Directory to write concordances to (default is STDOUT)')
    opt_parser.add_option('-l', '--latest', dest='latest', action='store_true', default=False, help='Copy <PLACETYPE>-<YMD>.csv to <PLACETYPE>-latest.csv (default is False)')

    # please write me... (20150722/thisisaaronland)
    # opt_parser.add_option('-i', '--iso', dest='iso', action='store', default=None, help='')

    opt_parser.add_option('-v', '--verbose', dest='verbose', action='store_true', default=False, help='Be chatty (default is false)')
    options, args = opt_parser.parse_args()

    if options.verbose:	
        logging.basicConfig(level=logging.DEBUG)
    else:
        logging.basicConfig(level=logging.INFO)

    if not options.placetype:
        logging.error("Missing place type")
        sys.exit(1)

    # sanity check place type here

    outfh = sys.stdout
    outpath = None

    if options.csv:

        root = os.path.abspath(options.csv)

        if not os.path.exists(root):
            logging.error("%s does not exist" % root)
            sys.exit()

        now = time.gmtime()
        ymd = time.strftime("%Y%m%d", now)

        fname = "wof-%s-%s.csv" % (options.placetype, ymd)
        outpath = os.path.join(root, fname)

        outfh = open(outpath, 'w')

    source = os.path.abspath(options.source)
    crawl = mapzen.whosonfirst.utils.crawl(source)

    defaults = {
        'id': 0,
        'parent_id': -1,
        'name': '',
        'fullname': '',
        'source': '',
        'path' : '',
        'lastmodified': 0,
        'iso': '',
        'bbox': '',
        'geomhash': '',
        'supersedes': '',
        'superseded_by': '',
        }

    fn = defaults.keys()
    fn.sort()

    writer = csv.DictWriter(outfh, fieldnames=fn)
    writer.writeheader()

    for path in crawl:

        logging.debug("checking %s" % path)

        try:
            fh = open(path, 'r')
            data = geojson.load(fh)
        except Exception, e:
            logging.error("failed to load %s, because %s" % (path, e))
            continue

        props = data['properties']
        placetype = props.get('wof:placetype', None)

        if not placetype:
            logging.warning("%s is missing an wof:placetype property" % path)
            continue

        if placetype != options.placetype:
            logging.debug("%s is a %s, so skipping" % (path, placetype))
            continue

        out = defaults

        wofid = props.get('wof:id', 0)

        if wofid == 0:
            logging.warning("%s is missing an wof:id property, using filename" % path)
            fname = os.path.basename(path)
            wofid = fname.replace(".geojson", "")
            
        out['id'] = wofid

        out['parent_id'] = props.get('wof:parent_id', -1)
        
        name = props.get('wof:name', None)
        
        if not name:
            name = props.get('name', None)
            
        if not name:
            name = ""
            
        name = name.encode('utf8')
        out['name'] = name

        source = None

        for k in ('src:geom', 'wof:source', 'wof:datasource'):

            if props.get(k):
                source = props[k]
                break

        if not source:
            logging.warning("%s is missing a source property" % path)
            source = ""

        out['source'] = source
        
        path = path.replace(options.source, "")
        path = path.lstrip("/")
            
        out['path'] = path

        bbox = data.get('bbox', None)
        
        if bbox:
            bbox = map(str, bbox)
            bbox = ",".join(bbox)
            out['bbox'] = bbox

        supersedes = props.get('wof:supersedes', [])
        superseded_by = props.get('wof:superseded_by', [])
        out['supersedes'] = ",".join(map(str, supersedes))
        out['superseded_by'] = ",".join(map(str, superseded_by))
        
        out['iso'] = props.get('iso:country', '')
        out['lastmodified'] = props.get('wof:lastmodified', 0)
        out['geomhash'] = props.get('wof:geomhash', '')
        
        writer.writerow(out)

    outfh.close()

    if options.latest:

        root = os.path.abspath(options.csv)
        fname = "wof-%s-latest.csv" % options.placetype
        latest_path = os.path.join(root, fname)

        logging.info("copy %s to %s" % (outpath, latest_path))
        shutil.copy(outpath, latest_path)

    sys.exit()
