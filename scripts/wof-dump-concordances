#!/usr/bin/env python

import sys
import logging
import os.path
import csv
import pprint
import geojson

if __name__ == '__main__':

    import optparse
    opt_parser = optparse.OptionParser()

    opt_parser.add_option('-s', '--source', dest='source', action='store', default=None, help='Where to read files from')
    opt_parser.add_option('-c', '--csv', dest='csv', action='store', default=None, help='Where to write concordances (default is STDOUT)')

    opt_parser.add_option('-v', '--verbose', dest='verbose', action='store_true', default=False, help='Be chatty (default is false)')
    options, args = opt_parser.parse_args()

    if options.verbose:	
        logging.basicConfig(level=logging.DEBUG)
    else:
        logging.basicConfig(level=logging.INFO)

    source = os.path.abspath(options.source)
    fh = sys.stdout

    if options.csv:
        path = os.path.abspath(options.csv)
        fh = open(path, 'w')

    fn = ('id', 'geoplanet_id', 'geonames_id', 'quattroshapes_id', 'iso', 'placetype')

    writer = csv.DictWriter(fh, fieldnames=fn)
    writer.writeheader()

    for (path, dirs, files) in os.walk(source):

        for f in files:

            f = os.path.join(path, f)
            f = os.path.abspath(f)

            if not f.endswith(".geojson"):
                logging.debug("%s is not a geojson file, skipping")
                continue

            logging.debug("processing %s" % f)

            try:
                fh = open(f, 'r')
                data = geojson.load(fh)
            except Exception, e:
                logging.error("failed to process %s, because %s" % (f, e))
                continue

            props = data['properties']

            if props.get('wof:placetype', '') == 'venue':
                logging.debug("skipping venues for now")
                continue

            concordances = props.get('wof:concordances', {})

            out = {
                'id' : props.get('wof:id', 0),
                'geoplanet_id' : concordances.get('gp:id', 0),
                'geonames_id' : concordances.get('gn:id', 0),
                'quattroshapes_id' : concordances.get('qs:id', 0),
                'iso': props.get('iso:country', ''),
                'placetype': props.get('wof:placetype', '')
            }

            writer.writerow(out)
